#!/usr/bin/python3
#+
# An animated display of a sorting algorithm. This script takes the following options:
#
# --algorithm=algorithm
#     (required) specifies which sorting algorithm to demonstrate. Currently-valid
#     values are "bubblesort", "quicksort" and "shellsort".
# --enddelay=t
#     the number of seconds to delay before quitting after the algorithm completes,
#     decimals allowed. If omitted, defaults to 5.0.
# --nrelements=n
#     the number of elements in the array to be sorted. If omitted, defaults to 10.
# --ordered=f
#     the fraction of elements to be initially ordered, decimals allowed, 0.0 to
#     completely randomize their order, 1.0 to leave them completely ordered, -1.0 to
#     have them in completely reverse order. If omitted, defaults to 0.0.
# --startdelay=t
#     the number of seconds to delay before starting the sort,
#     decimals allowed. If omitted, defaults to 3.0.
# --step=t
#     the number of seconds to delay between element swaps, decimals allowed. If
#     omitted, defaults to 1.0.
#
# Copyright 2009-2017 Lawrence D'Oliveiro <ldo@geek-central.gen.nz>.
# Licensed under CC-BY <http://creativecommons.org/licenses/by/4.0/>.
#-

import sys
import time
import signal
import colorsys
import random
import asyncio
# docs: <https://pygobject.readthedocs.io/en/latest/>
import gi
gi.require_version("Gtk", "3.0")
from gi.repository import \
    Gtk
import glibcoro
import getopt

glibcoro.install()
loop = asyncio.get_event_loop()
assert isinstance(loop, glibcoro.GLibEventLoop)

#+
# Misc useful stuff
#-

class SortClass :
    "abstract base class for sort algorithms."

    def compare(self, a, b) :
        # should return True iff the elements with the specified indices are already
        # in the right order.
        raise NotImplementedError("must be overridden")
    #end compare

    async def swap(self, a, b) :
        # should exchange the elements with the specified indices.
        raise NotImplementedError("must be overridden")
    #end swap

    async def sort(self) :
        # should run the actual sort algorithm.
        raise NotImplementedError("must be overridden")
    #end sort

#end SortClass

def new_label() :
    "returns a new Label widget which is meant to hold variable text," \
    " initially filled in with something to force its width to a" \
    " reasonable minimum."
    return \
        Gtk.Label("W" * 10)
#end new_label

#+
# Animation management
#-

def draw_background(da, ctx) :
    drawable = da.get_parent_window()
    _, _, width, height = drawable.get_geometry()
    ctx.set_source_rgb(*colorsys.hsv_to_rgb(0.55, 0.25, 0.75))
    ctx.rectangle(0, 0, width, height)
    ctx.fill()
#end draw_background

class ItemWidget :
    "manages rendition of an array sort element."

    def __init__(self) :
        self.display_widget = Gtk.DrawingArea()
        self.display_widget.set_size_request(100, 8)
        self.value = None
        self.selected = False
        self.display_widget.connect("draw", self.draw)
    #end __init__

    def draw(self, da, ctx) :
        width = da.get_allocated_width()
        height = da.get_allocated_height()
        if self.selected :
            ctx.set_source_rgb(*colorsys.hsv_to_rgb(0, 0.5, 0.75))
        else :
            ctx.set_source_rgb(*colorsys.hsv_to_rgb(0.18, 1, 0.85))
        #end if
        ctx.rectangle(0, 0, round(width * self.value / nr_sort_items), height)
        ctx.fill()
    #end draw

    def set_value(self, new_value) :
        if new_value != self.value :
            self.value = new_value
            self.display_widget.queue_draw()
        #end if
    #end set_value

    def set_selected(self, new_selected) :
        if new_selected != self.selected :
            self.selected = new_selected != False
            self.display_widget.queue_draw()
        #end if
    #end set_selected

#end ItemWidget

def recompute_ordered() :
    "sets ordered_label to show a number indicating how well-ordered the sort" \
    " elements are: 1.0 for completely in order, -1.0 for completely the wrong order," \
    " or something correspondingly in-between."
    # fixme: this interpretation of “ordered” parameter tends to be too
    # close to zero compared with shuffle performed according to
    # “--ordered” setting. Latter make sense (value of 0 gives good random
    # order), this one needs fixing.
    ordered = 0
    for i in range(0, nr_sort_items - 1) :
        if the_sort_items[i] <= the_sort_items[i + 1] :
            ordered += 1
        else :
            ordered -= 1
        #end if
    #end for
    ordered_label.set_text("Ordered: %.2f" % (ordered / (nr_sort_items - 1)))
#end recompute_ordered

class AnimSortClass(SortClass) :
    "provides animated compare and swap callbacks for sort algorithms."

    def compare(self, a, b) :
        global nr_compares
        if verbose :
            sys.stderr.write("compare %d(%d) <=> %d(%d)\n" % (a, the_sort_items[a], b, the_sort_items[b]))
        #end if
        nr_compares += 1
        compare_count_label.set_text("Compares: %d" % nr_compares)
        return the_sort_items[a] <= the_sort_items[b]
    #end compare

    async def swap(self, a, b) :
        global nr_swaps
        if verbose :
            sys.stderr.write("swap %d(%d) <=> %d(%d)\n" % (a, the_sort_items[a], b, the_sort_items[b]))
        #end if
        nr_swaps += 1
        swap_count_label.set_text("Swaps: %d" % nr_swaps)
        the_sort_items[b], the_sort_items[a] = the_sort_items[a], the_sort_items[b]
        the_sort_display[a].set_selected(True)
        the_sort_display[b].set_selected(True)
        await asyncio.sleep(sort_step_interval / 2) # give user time to see change
        the_sort_display[a].set_value(the_sort_items[a])
        the_sort_display[b].set_value(the_sort_items[b])
        recompute_ordered()
        await asyncio.sleep(sort_step_interval / 2) # give user time to see change
        the_sort_display[a].set_selected(False)
        the_sort_display[b].set_selected(False)
    #end swap

#end AnimSortClass

#+
# The sorting algorithms
#-

class Bubblesort(AnimSortClass) :

    async def sort(self) :
        if verbose :
            sys.stderr.write("start sort\n")
        #end if
        for i in range(0, nr_sort_items) :
            for j in range(i + 1, nr_sort_items) :
                if not self.compare(i, j) :
                    await self.swap(i, j)
                #end if
            #end for
        #end for
    #end sort

#end Bubblesort

class Quicksort(AnimSortClass) :

    async def partition(self, low, high) :
        if verbose :
            sys.stderr.write("partition [%d .. %d]\n" % (low, high))
        #end if
        pivot = low
        swap_low = low
        swap_high = high
        # partitioning-in-place algorithm copied from <http://www.cs.auckland.ac.nz/software/AlgAnim/qsort1a.html>
        while swap_low < swap_high :
            while swap_low <= high and self.compare(swap_low, pivot) :
                await self.swap(swap_low, pivot)
                  # yes I know, keeping the pivot element in the array, instead
                  # of taking it out and putting it back at the end, will lead
                  # to increased swap operations.
                pivot = swap_low
                swap_low += 1
            #end while
            while swap_high > low and not self.compare(swap_high, pivot) :
                swap_high -= 1
            #end while
            if swap_low < swap_high and swap_low <= high :
                await self.swap(swap_low, swap_high)
                if pivot == swap_low :
                    pivot = swap_high
                elif pivot == swap_high :
                    pivot = swap_low
                #end if
            #end if
        #end while
        if pivot > low :
            await self.partition(low, pivot)
        #end if
        if pivot + 1 < high :
            await self.partition(pivot + 1, high)
        #end if
        if verbose :
            sys.stderr.write("done partition [%d .. %d]\n" % (low, high))
        #end if
    #end partition

    async def sort(self) :
        await self.partition(0, nr_sort_items - 1)
    #end sort

#end Quicksort

class Shellsort(AnimSortClass) :

    async def sort(self) :
        m = 1
        while m < nr_sort_items :
            m += m
        #end while
        m = \
            (
                (m - 1)
                  # to ensure that successive increments are relatively prime,
                  # as per Knuth vol 3 page 91
            >>
                1
            )
        if m == 0 and nr_sort_items > 1 :
          # do at least one pass when sorting 2 elements
            m = 1
        #end if
        while m > 0 :
            k = nr_sort_items - m
            for j in range(0, k) :
                i = j
                while True :
                    l = i + m
                    if self.compare(i, l) :
                        break
                    await self.swap(i, l)
                    if i < m :
                        break
                    i -= m
                #end while
            #end for
            m >>= 1
        #end while
    #end sort

#end Shellsort

sorting_algorithms = \
    {
        "bubblesort" : Bubblesort,
        "quicksort" : Quicksort,
        "shellsort" : Shellsort,
    }

#+
# Globals
#-

# default params:
nr_sort_items = 10
sort_step_interval = 1.0 # seconds
start_delay = 3.0 # seconds
end_delay = 5.0 # seconds

#+
# GUI callbacks
#-

def stop(_) :
    "installed as callback, e.g. when main window's close box is clicked," \
    " to stop program."
    loop.stop()
#end stop

async def sort_task() :
    await asyncio.sleep(start_delay)
    sorter = algorithm()
    await sorter.sort()
    await asyncio.sleep(end_delay)
    loop.stop()
#end sort_task

#+
# Mainline
#-

opts, args = getopt.getopt \
  (
    sys.argv[1:],
    "",
    ["algorithm=", "enddelay=", "nrelements=", "ordered=", "startdelay=", "step=", "verbose"]
  )
if len(args) != 0 :
    raise getopt.GetoptError("no arguments expected")
#end if
algorithm = None
ordered = 0.0
verbose = False
for keyword, value in opts :
    if keyword == "--algorithm" :
        algorithm_name = value
        if algorithm_name not in sorting_algorithms :
            raise getopt.GetoptError \
              (
                    "unrecognized sorting algorithm \"%(name)s\", must be one of %(list)s"
                %
                    {
                        "name" : algorithm_name,
                        "list" : ", ".join(sorted(sorting_algorithms.keys()))
                    }
              )
        #end if
        algorithm = sorting_algorithms[algorithm_name]
    elif keyword == "--enddelay" :
        end_delay = float(value)
        if end_delay < 0 :
            raise getopt.GetoptError("--enddelay must not be negative")
        #end if
    elif keyword == "--nrelements" :
        nr_sort_items = int(value)
        if nr_sort_items <= 0 :
            raise getopt.GetoptError("--nrelements must be greater than zero")
        #end if
    elif keyword == "--ordered" :
        ordered = float(value)
        if ordered < -1 or ordered > 1 :
            raise getopt.GetoptError("--ordered must be in [-1 .. 1]")
        #end if
    elif keyword == "--startdelay" :
        start_delay = float(value)
        if start_delay < 0 :
            raise getopt.GetoptError("--startdelay must not be negative")
        #end if
    elif keyword == "--step" :
        sort_step_interval = float(value)
        if sort_step_interval < 0 :
            raise getopt.GetoptError("--step must not be negative")
        #end if
    elif keyword == "--verbose" :
        verbose = True
    #end if
#end for
if algorithm == None :
    raise getopt.GetoptError("no --algorithm specified")
#end if
the_sort_items = list(range(1, nr_sort_items + 1))
if ordered < 0 :
    the_sort_items = list(reversed(the_sort_items))
    ordered = - ordered
#end if
for i in range(nr_sort_items - 1, 0, -1) :
    if random.random() >= ordered :
        j = int(random.random() * (i + 1))
        the_sort_items[i], the_sort_items[j] = the_sort_items[j], the_sort_items[i]
    #end if
#end for

main_window = Gtk.Window()
main_window.connect("destroy", stop)
main_window.set_border_width(10)
main_box = Gtk.VBox(False, 8)
main_box.pack_start(Gtk.Label(algorithm_name), False, False, 0)
items_box = Gtk.VBox(False, 8)
items_box.connect("draw", draw_background)
main_box.pack_start(items_box, False, False, 0)
the_sort_display = []
for i in range(0, len(the_sort_items)) :
    the_widget = ItemWidget()
    items_box.pack_start(the_widget.display_widget, False, False, 0)
    the_widget.set_value(the_sort_items[i])
    the_sort_display.append(the_widget)
#end for
labels_box = Gtk.HBox(False, 8)
ordered_label = new_label()
compare_count_label = new_label()
labels_box.pack_start(ordered_label, False, False, 0)
labels_box.pack_start(compare_count_label, False, False, 0)
swap_count_label = new_label()
labels_box.pack_start(swap_count_label, False, False, 0)
nr_compares = 0
nr_swaps = 0
main_box.pack_start(labels_box, False, False, 0)
main_window.add(main_box)
main_window.show_all()
ordered_label.set_text("")
compare_count_label.set_text("")
swap_count_label.set_text("")
recompute_ordered()
main_window.show()
loop.create_task(sort_task())
#loop.add_signal_handler(signal.SIGINT, stop, None)
  # unnecessary to allow interruption with CTRL/C
loop.run_forever()
