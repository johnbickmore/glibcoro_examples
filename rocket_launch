#!/usr/bin/python3
#+
# glibcoro example: Rocket-launch simulation. This script demonstrates
# “event-loop-agnostic” code: the code works equally well whether the
# event loop comes from GLib (via glibcoro) or the standard
# asyncio.BaseEventLoop. The choice is made based on the setting of the
# USE_GLIB environment variable: if not set, then GLib is used;
# if set to “N” or “0”, then it falls back to asyncio.BaseEventLoop.
#
# Copyright 2017 Lawrence D'Oliveiro <ldo@geek-central.gen.nz>. This
# script is licensed CC0
# <https://creativecommons.org/publicdomain/zero/1.0/>; do with it
# what you will.
#-

import sys
import os
import asyncio
import glibcoro

use_glib = os.getenv("USE_GLIB", "")[:1].upper() not in ("N", "0")
sys.stdout.write("use_glib: %s\n" % use_glib)
if use_glib :
    glibcoro.install()
#end if
loop = asyncio.get_event_loop()
assert isinstance(loop, glibcoro.GLibEventLoop) == use_glib

start_time = loop.time()

def log_msg(msg) :
    now = loop.time() - start_time
    sys.stdout.write("%05.1f: %s\n" % (now, msg))
#end log_msg

async def launch_rocket(name) :
    count = 5
    while count > 0 :
        log_msg("%s countdown T minus %d seconds" % (name, count))
        await asyncio.sleep(1)
        count -= 1
    #end while
    log_msg("%s liftoff!" % name)
    await asyncio.sleep(5)
    log_msg("%s booster separation" % name)
    await asyncio.sleep(5)
    log_msg("%s orbit achieved." % name)
#end launch_rocket

async def mission_control() :
    log_msg("simulation starts")
    loop.create_task(launch_rocket("alpha"))
    await asyncio.sleep(3)
    loop.create_task(launch_rocket("beta"))
    await asyncio.sleep(3)
    loop.create_task(launch_rocket("gamma"))
    await asyncio.sleep(25 - loop.time() + start_time)
    loop.stop()
    log_msg("simulation stops")
#end mission_control

loop.create_task(mission_control())
loop.run_forever()
