#!/usr/bin/python3
#+
# glibcoro example: Conway’s Game of Life. Learn more here:
# <http://www.conwaylife.com/wiki/Main_Page>.
#
# Copyright 2017 Lawrence D'Oliveiro <ldo@geek-central.gen.nz>.
# Licensed under CC-BY <http://creativecommons.org/licenses/by/4.0/>.
#-

import sys
import os
import math
import asyncio
import colorsys
import getopt
# docs: <https://developer.gnome.org/references>,
# <https://pygobject.readthedocs.io/en/latest/>
import gi
gi.require_version("Gdk", "3.0")
gi.require_version("Gtk", "3.0")
from gi.repository import \
    Gdk, \
    Gtk
import glibcoro

#+
# The Game of Life
#-

class LifeState :
    "represents the board state."

    def __init__(self, initalive = None) :
        self.alive = set()
        if initalive != None :
            for alive in initalive :
                self[alive] = True
            #end for
        #end if
    #end __init__

    @staticmethod
    def get_coords(coords) :
        if (
                not isinstance(coords, (list, tuple))
            or
                len(coords) != 2
            or
                not all(isinstance(x, int) for x in coords)
        ) :
            raise TypeError("coords must be (x, y) 2-tuple of integer coords")
        #end if
        return \
            tuple(coords)
    #end get_coords

    def __getitem__(self, coords) :
        return \
            self.get_coords(coords) in self.alive
    #end __getitem__

    def __setitem__(self, coords, alive) :
        coords = self.get_coords(coords)
        if alive :
            self.alive.add(coords)
        else :
            self.alive.discard(coords)
        #end if
    #end __setitem__

    def __len__(self) :
        return \
            len(self.alive)
    #end __len__

    def __iter__(self) :
        return \
            iter(self.alive)
    #end __iter__

    def min(self) :
        if len(self.alive) != 0 :
            result = \
              (
                min(x[0] for x in self.alive),
                min(x[1] for x in self.alive)
              )
        else :
            result = (0, 0) # arbitrary
        #end if
        return \
            result
    #end min

    def max(self) :
        if len(self.alive) != 0 :
            result = \
              (
                max(x[0] for x in self.alive),
                max(x[1] for x in self.alive)
              )
        else :
            result = (0, 0) # arbitrary
        #end if
        return \
            result
    #end max

    def nr_neighbours(self, coords) :
        "returns the number of live neighbours adjoining coords."
        x, y = self.get_coords(coords)
        return \
            (
                sum
                  (
                    int((xn, yn) in self.alive)
                    for xn in (x - 1, x, x + 1)
                    for yn in (y - 1, y, y + 1)
                  )
            -
                ((x, y) in self.alive)
            )
    #end nr_neighbours

    def step(self) :
        "advances the board state to the next generation."
        new_alive = set()
        min_x, min_y = self.min()
        max_x, max_y = self.max()
        for x in range(min_x - 1, max_x + 2) :
            for y in range(min_y - 1, max_y + 2) :
                nr_neighbours = self.nr_neighbours((x, y))
                if nr_neighbours == 3 or nr_neighbours == 2 and self[x, y] :
                    new_alive.add((x, y))
                #end if
            #end for
        #end for
        self.alive = new_alive
    #end step

#end LifeState

def load_life_file(filename) :
    "loads a .LIF format file and returns a list of cell coordinate pairs."

    linenr = 0

    class BadSyntax(Exception) :

        def __init__(self, msg) :
            self.args = ("life file syntax error at line %d: %s" % (linenr, msg),)
        #end __init__

    #end BadSyntax

#begin load_life_file
    cells = []
    seen_first_line = False
    rule_seen = False
    block_origin = None
    for line in open(filename, "r") :
        linenr += 1
        line = line.rstrip()
        if seen_first_line :
            if line.startswith("#D") or line.startswith("#C") :
                pass # comment
            elif line.startswith("#R") :
                if rule_seen :
                    raise BadSyntax("duplicate rule")
                #end if
                items = line.split(" ")[1:]
                if len(items) != 1 :
                    raise BadSyntax("bad rule")
                #end if
                items = items[0].split("/")
                if len(items) != 2 :
                    raise BadSyntax("bad rule")
                #end if
                if items != ("23", "3") :
                    raise BadSyntax("nonstandard rule")
                #end if
                rule_seen = True
            elif line.startswith("#N") :
                if rule_seen :
                    raise BadSyntax("duplicate rule")
                #end if
                rule_seen = True
            elif line.startswith("#P") :
                if not rule_seen :
                    raise BadSyntax("missing rule")
                #end if
                items = line.split(" ")[1:]
                if len(items) != 2 :
                    raise BadSyntax("bad block origin")
                #end if
                try :
                    block_origin = tuple(int(i) for i in items)
                except ValueError :
                    raise BadSyntax("bad block origin")
                #end try
            elif block_origin != None :
                items = tuple(line)
                if not all(c in (".", "*") for c in items) :
                    raise BadSyntax("bad cells")
                #end if
                for i, c in enumerate(items) :
                    if c == "*" :
                        cells.append((i + block_origin[0], block_origin[1]))
                    #end if
                #end for
                block_origin = (block_origin[0], block_origin[1] + 1)
            else :
                raise BadSyntax("unrecognized line")
            #end if
        else :
            if line.startswith("#Life ") :
                items = line.split(" ")[1:]
                if len(items) != 1 or items[0] != "1.05" :
                    raise BadSyntax("bad “#Life” version string")
                #end if
                seen_first_line = True
            else :
                raise BadSyntax("first line must begin with “#Life”")
            #end if
        #end if
    #end for
    return \
        cells
#end load_life_file

class LifeDisplay :

    cell_size = (16, 16)

    def __init__(self, state, area, display, cursor_pos) :
        self.state = state
        self.area = area
        self.display = display
        display.connect("draw", self._draw)
        self.origin = (0, 0)
        hadj = display.get_hadjustment()
        self.h_value_changed = hadj.connect("value-changed", self._value_changed, False)
        vadj = display.get_vadjustment()
        self.v_value_changed = vadj.connect("value-changed", self._value_changed, True)
        self.cursor_pos = LifeState.get_coords(cursor_pos)
        self.running = False
    #end __init__

    def recompute_scroll_bounds(self) :
        state_min_x, state_min_y = self.state.min()
        state_max_x, state_max_y = self.state.max()
        state_min_x = min(self.cursor_pos[0], state_min_x)
        state_max_x = max(self.cursor_pos[0], state_max_x)
        state_min_y = min(self.cursor_pos[1], state_min_y)
        state_max_y = max(self.cursor_pos[1], state_max_y)
        hadj = self.area.get_hadjustment()
        vadj = self.area.get_vadjustment()
        hadj.set_lower(min(state_min_x * self.cell_size[0], hadj.get_value()))
        hadj.set_upper(max((state_max_x + 1) * self.cell_size[0], hadj.get_value()))
        vadj.set_lower(min(state_min_y * self.cell_size[1], vadj.get_value()))
        vadj.set_upper(max((state_max_y + 1) * self.cell_size[1], vadj.get_value()))
        # hadj.changed()
        # vadj.changed()
    #end recompute_scroll_bounds

    def _value_changed(self, adj, vert) :
        hadj = self.area.get_hadjustment()
        vadj = self.area.get_vadjustment()
        self.origin = \
            (
                round(hadj.get_value() / self.cell_size[0]),
                round(vadj.get_value() / self.cell_size[1])
            )
        self.inval_all()
    #end _value_changed

    def cell_to_coords(self, i, j) :
        return \
            ((i - self.origin[0]) * self.cell_size[0], (j - self.origin[1]) * self.cell_size[1])
    #end cell_to_coords

    def coords_to_cell(self, x, y) :
        return \
            (x / self.cell_size[0] + self.origin[0], y / self.cell_size[1] + self.origin[1])
    #end coords_to_cell

    @property
    def visible_cell_range(self) :
        "returns (cell_left, cell_top, cells_across, cells_down)."
        cells_across = math.floor(self.area.get_allocated_width() / self.cell_size[0])
        cells_down = math.floor(self.area.get_allocated_height() / self.cell_size[1])
        return \
            self.origin + (cells_across, cells_down)
    #end visible_cell_range

    def inval_cell(self, i, j) :
        "invalidates the area occupied by the specified cell."
        self.area.queue_draw_area(*(self.cell_to_coords(i, j) + self.cell_size))
    #end inval_cell

    def inval_all(self) :
        "invalidates the entire display."
        self.area.queue_draw_area \
          (
            0,
            0,
            self.area.get_allocated_width(),
            self.area.get_allocated_height()
          )
    #end inval_all

    def set_cursor_pos(self, i, j) :
        if not isinstance(i, int) or not isinstance(j, int) :
            raise TypeError("cursor coords must be integers")
        #end if
        visible_range = self.visible_cell_range
        self.inval_cell(*self.cursor_pos)
        self.cursor_pos = (i, j)
        self.inval_cell(*self.cursor_pos)
        self.recompute_scroll_bounds()
        new_origin_x, new_origin_y = self.origin
        if self.cursor_pos[0] < math.ceil(self.origin[0]) :
            new_origin_x = self.cursor_pos[0]
        elif self.cursor_pos[0] >= visible_range[0] + math.floor(visible_range[2]) - 1 :
            new_origin_x = self.cursor_pos[0] - math.floor(visible_range[2]) + 1
        #end if
        if self.cursor_pos[1] < math.ceil(self.origin[1]) :
            new_origin_y = self.cursor_pos[1]
        elif self.cursor_pos[1] >= visible_range[1] + math.floor(visible_range[3]) - 1 :
            new_origin_y = self.cursor_pos[1] - math.floor(visible_range[3]) + 1
        #end if
        self.scroll(new_origin_x - self.origin[0], new_origin_y - self.origin[1])
    #end set_cursor_pos

    def scroll(self, di, dj) :
        if not isinstance(di, int) or not isinstance(dj, int) :
            raise TypeError("offset coords must be integers")
        #end if
        new_origin = (self.origin[0] + di, self.origin[1] + dj)
        if new_origin != self.origin :
            self.origin = new_origin
            self.inval_all()
            hadj = self.display.get_hadjustment()
            vadj = self.display.get_vadjustment()
            hadj.handler_block(self.h_value_changed)
            vadj.handler_block(self.v_value_changed)
            hadj.set_value(new_origin[0] * self.cell_size[0])
            vadj.set_value(new_origin[1] * self.cell_size[1])
            hadj.handler_unblock(self.h_value_changed)
            vadj.handler_unblock(self.v_value_changed)
        #end if
    #end scroll

    def set_scroll(self, i, j) :
        self.scroll(i - self.origin[0], j - self.origin[1])
    #end set_scroll

    def _draw(self, display, ctx) :
        ctx.save()
        origin = self.cell_to_coords(*self.origin)
        ctx.translate(- origin[0], - origin[1])
        state_min_x, state_min_y = self.state.min()
        state_max_x, state_max_y = self.state.max()
        ctx.set_source_rgb(*colorsys.hsv_to_rgb(0.5, 0, 0.9))
        ctx.paint()
        ctx.set_line_width(1)
        ctx.set_source_rgb(*colorsys.hsv_to_rgb(0.5, 0.5, 0.9))
        topleft_corner_cell = tuple(math.floor(x) for x in self.coords_to_cell(0, 0))
        botright_corner_cell = \
            tuple \
              (
                math.ceil(x) + 1
                for x in
                    self.coords_to_cell
                      (
                        self.area.get_allocated_width(),
                        self.area.get_allocated_height()
                      )
              )
        for x in range(topleft_corner_cell[0], botright_corner_cell[0]):
            ctx.move_to(*self.cell_to_coords(x, topleft_corner_cell[1]))
            ctx.line_to(*self.cell_to_coords(x, botright_corner_cell[1]))
            ctx.stroke()
        #end for
        for y in range(topleft_corner_cell[1], botright_corner_cell[1]):
            ctx.move_to(*self.cell_to_coords(topleft_corner_cell[0], y))
            ctx.line_to(*self.cell_to_coords(botright_corner_cell[0], y))
            ctx.stroke()
        #end for
        if not self.running :
            ctx.set_source_rgb(*colorsys.hsv_to_rgb(0.6, 0.5, 0.9))
            ctx.rectangle \
              (
                *(self.cell_to_coords(*self.cursor_pos) + self.cell_size)
              )
            ctx.fill()
        #end if
        ctx.set_source_rgb(*colorsys.hsv_to_rgb(0.9, 0.5, 0.7))
        for x in range(state_min_x, state_max_x + 1) :
            for y in range(state_min_y, state_max_y + 1) :
                if state[x, y] :
                    cell_centre = self.cell_to_coords(x + 0.5, y + 0.5)
                    ctx.arc \
                      (
                        cell_centre[0], # centre x
                        cell_centre[1], # centre y
                        self.cell_size[0] * 0.45, # radius
                        0, # angle1
                        2 * math.pi # angle2
                      )
                    ctx.fill()
                #end if
            #end for
        #end for
        ctx.restore()
    #end _draw

    def home(self) :
        state_min_x, state_min_y = self.state.min()
        state_max_x, state_max_y = self.state.max()
        cells_across, cells_down = self.visible_cell_range[2:]
        self.set_cursor_pos((state_min_x + state_max_x) // 2, (state_min_y + state_max_y) // 2)
        self.set_scroll \
          (
            self.cursor_pos[0] - cells_across // 2,
            self.cursor_pos[1] - cells_down // 2
          )
    #end home

#end LifeDisplay

class SingleEltQueue :
    "a queue that can only hold a single item at most. Adding another" \
    " item causes any previous one to be lost."

    def __init__(self) :
        self.q = asyncio.Queue(maxsize = 1)
    #end __init__

    def put(self, item) :
        if self.q.full() :
            self.q.get_nowait() # get rid of existing item
        #end if
        self.q.put_nowait(item)
    #end put

    def get(self) :
        "coroutine!"
        # fixme: how to cancel waiting caller when main loop is stopped?
        return \
            self.q.get()
    #end get

#end SingleEltQueue

#+
# Globals
#-

glibcoro.install()
loop = asyncio.get_event_loop()

main_window = None
prompt_area = None
info_area = None
cur_main_task = None # keep a reference to currently-running task

state = None
state_display = None
input = SingleEltQueue()
show_min_cells = (40, 40) # show at least this number of cells
step_interval = 0.5

#+
# Mainline
#-

def stop(_) :
    "installed as callback, e.g. when main window’s close box is clicked," \
    " to stop program."
    for task in asyncio.Task.all_tasks() :
        task.cancel()
    #end for
    loop.stop()
#end stop

def set_prompt(msg) :
    prompt_area.pop(0) # drop previous message, if any
    prompt_area.push(0, msg)
#end set_prompt

def set_info(msg) :
    info_area.pop(0) # drop previous message, if any
    info_area.push(0, msg)
#end set_info

async def edit_mode() :
    "lets the user make changes to the board layout, run the" \
    " generations, or quit the program."
    global cur_main_task
    state_display.running = False
    state_display.inval_all()
    set_prompt("Editing: SPACE toggle, UP/DOWN/LEFT/RIGHT move, TAB step, RETURN run, Q quit")
    while True :
        set_info \
          (
                "Curs (%d, %d) pop %d"
            %
                (state_display.cursor_pos[0], state_display.cursor_pos[1], len(state))
          )
        event = await input.get()
        key = event.keyval
        if key == Gdk.KEY_Up :
            state_display.set_cursor_pos(state_display.cursor_pos[0], state_display.cursor_pos[1] - 1)
        elif key == Gdk.KEY_Down :
            state_display.set_cursor_pos(state_display.cursor_pos[0], state_display.cursor_pos[1] + 1)
        elif key == Gdk.KEY_Right :
            state_display.set_cursor_pos(state_display.cursor_pos[0] + 1, state_display.cursor_pos[1])
        elif key == Gdk.KEY_Left :
            state_display.set_cursor_pos(state_display.cursor_pos[0] - 1, state_display.cursor_pos[1])
        elif key == Gdk.KEY_Home :
            state_display.home()
        elif key == Gdk.KEY_space :
            state[state_display.cursor_pos] = not state[state_display.cursor_pos]
            state_display.inval_cell(*state_display.cursor_pos)
            state_display.recompute_scroll_bounds()
        elif key == Gdk.KEY_Tab :
            state.step()
            state_display.recompute_scroll_bounds()
            state_display.inval_all()
        elif key == Gdk.KEY_Return :
            cur_main_task = loop.create_task(run_mode())
            break
        elif key == Gdk.KEY_q :
            loop.stop()
            break
        #end if
    #end while
#end edit_mode

async def run_mode() :
    "lets the user scroll around while running the generations."
    global cur_main_task
    generate_task = loop.create_task(generate())
    state_display.running = True
    state_display.inval_all()
    set_prompt("Running: UP/DOWN/LEFT/RIGHT scroll, ESCAPE stop")
    while True :
        event = await input.get()
        key = event.keyval
        if key == Gdk.KEY_Up :
            state_display.scroll(0, -1)
        elif key == Gdk.KEY_Down :
            state_display.scroll(0, 1)
        elif key == Gdk.KEY_Right :
            state_display.scroll(1, 0)
        elif key == Gdk.KEY_Left :
            state_display.scroll(-1, 0)
        elif key == Gdk.KEY_Home :
            state_display.home()
        elif key == Gdk.KEY_Escape :
            generate_task.cancel()
            cur_main_task = loop.create_task(edit_mode())
            break
        #end if
    #end while
#end run_mode

async def generate() :
    "runs the generations."
    gen_count = 0
    while True :
        state.step()
        state_display.recompute_scroll_bounds()
        state_display.inval_all()
        gen_count += 1
        set_info("Gen %d pop %d" % (gen_count, len(state)))
        await asyncio.sleep(step_interval)
    #end while
#end generate

def setup_main_window() :

    def final_setup(_1, _2) :
        prompt_area.grab_focus()
        state_display.home()
    #end final_setup

    def user_input(widget, event, user_data) :
        input.put(event)
        return \
            True
    #end user_input

#begin setup_main_window
    global state_display, main_window, prompt_area, info_area
    main_window = Gtk.Window()
    main_window.connect("destroy", stop)
    main_window.set_border_width(10)
    main_grid = Gtk.Grid()
    # main_grid.set_column_homogeneous(True) # unneeded with h/vexpand
    board_display = Gtk.ScrolledWindow(None, None)
    board_display.set_policy(Gtk.PolicyType.ALWAYS, Gtk.PolicyType.ALWAYS)
    board_display.set_hexpand(True)
    board_display.set_vexpand(True)
    board_area = Gtk.Layout()
    board_display.add(board_area)
    state_display = LifeDisplay(state, board_area, board_display, (0, 0))
    board_display.set_property("width-request", state_display.cell_size[0] * show_min_cells[0])
    board_display.set_property("height-request", state_display.cell_size[1] * show_min_cells[1])
    main_grid.attach(board_display, 0, 0, 5, 1)
    prompt_area = Gtk.Statusbar()
    prompt_area.set_can_focus(True)
    prompt_area.connect("key_press_event", user_input, None)
    info_area = Gtk.Statusbar()
    main_grid.attach_next_to(prompt_area, board_display, Gtk.PositionType.BOTTOM, 4, 1)
    main_grid.attach_next_to(info_area, prompt_area, Gtk.PositionType.RIGHT, 1, 1)
    # How do I right-align the info area? Currently I am fudging it by giving more
    # columns to the prompt_area (above). Docs say GtkGrid is the way to go,
    # but perhaps I should revert to a GtkBox instead.
    # info_area.set_valign(Gtk.Align.END) # makes no difference to anything
    main_window.add(main_grid)
    main_window.connect("realize", final_setup, None)
    main_window.show_all()
    main_window.show()
#end setup_main_window

def getcmd() :
    global state, step_interval
    opts, args = getopt.getopt \
      (
        sys.argv[1:],
        "",
        ["step="]
      )
    for keyword, value in opts :
        if keyword == "--step" :
            step_interval = float(value)
            assert step_interval >= 0
        #end if
    #end for
    if len(args) > 1 :
        raise getopt.GetoptError("expecting at most one arg, the name of the .LIF file to load")
    #end if
    if len(args) > 0 :
        initalive = load_life_file(args[0])
    else :
        initalive = None
    #end if
    state = LifeState(initalive)
#end getcmd

getcmd()
setup_main_window()
cur_main_task = loop.create_task(edit_mode())
loop.run_forever()
